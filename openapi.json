{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.1",
    "title": "GYK Pair-1 ML Prediction API",
    "description": "API for machine learning model predictions and related services",
    "contact": {
      "name": "API Support",
      "email": "api-support@example.com"
    },
    "x-logo": {
      "url": "logo.png",
      "altText": "Logo"
    }
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production API Server"
    },
    {
      "url": "https://sandbox-api.example.com/v1",
      "description": "Sandbox API Server"
    }
  ],
  "tags": [
    {
      "name": "Readme",
      "description": "Project information and documentation"
    },
    {
      "name": "General",
      "description": "General API endpoints"
    },
    {
      "name": "Predictions",
      "description": "API endpoints related to model predictions"
    },
    {
      "name": "Data",
      "description": "API endpoints for data retrieval"
    },
    {
      "name": "Model",
      "description": "API endpoints for model management"
    }
  ],
  "paths": {
    "/readme": {
      "get": {
        "tags": ["Readme"],
        "summary": "Project Information",
        "description": "# GYK Pair-1 ML Prediction API\n\n## Project Overview\n\nThis project provides a machine learning-based API for predicting customer purchase behavior. Using historical purchase data, our model predicts whether a customer will buy a specific product in a given month.\n\n### ML Model Details\n\n- **Model Type**: Random Forest Classifier\n- **Features Used**:\n  - Customer-Product Interaction history\n  - Previous month purchase quantity\n  - Rolling 3-month average purchases\n  - Month seasonality (using sine and cosine transformations)\n- **Training Data**: Historical purchase data from the Northwind database\n- **Accuracy**: 87% on test data\n\n### Why This Model?\n\nWe chose Random Forest for its ability to handle categorical features, resistance to overfitting, and good performance on tabular data. The model captures both customer-specific patterns and seasonal trends.\n\n## How to Run\n\n### Option 1: Docker (Recommended)\n\n```bash\n# Pull the latest image\ndocker pull yourusername/gyk-pair1-prediction-api:latest\n\n# Run the container\ndocker run -p 8000:8000 yourusername/gyk-pair1-prediction-api:latest\n```\n\n### Option 2: Local Installation\n\n```bash\n# Clone repository\ngit clone https://github.com/yourusername/gyk-pair1-prediction-api.git\n\n# Install dependencies\npip install -r requirements.txt\n\n# Run the application\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n```\n\n## Database Configuration\n\nThe API connects to a PostgreSQL database. Set your connection details in an environment variable:\n\n```bash\nexport DATABASE_URL=\"postgresql://username:password@localhost:5432/northwind\"\n```\n\n## API Testing\n\nTest the API using curl or any API client like Postman:\n\n```bash\n# Test if API is running\ncurl http://localhost:8000/\n\n# Make a prediction\ncurl -X POST http://localhost:8000/predict \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"customer_id\":\"ALFKI\",\"product_id\":1,\"order_month\":6}'\n```\n",
        "operationId": "getReadme",
        "responses": {
          "200": {
            "description": "Project information",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "General"
        ],
        "summary": "Root Endpoint",
        "description": "If the API is up and running, it returns 'API is ready!'",
        "operationId": "readRoot",
        "responses": {
          "200": {
            "description": "API is operational",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "up"
                    },
                    "message": {
                      "type": "string",
                      "example": "API is ready!"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "API is not operational",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "down"
                    },
                    "error": {
                      "type": "string",
                      "example": "ECONNREFUSED"
                    },
                    "message": {
                      "type": "string",
                      "example": "API service is not available"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Get Products",
        "description": "Retrieves all products from the database",
        "operationId": "getProducts",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Products not found or database error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error while getting products."
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Get Categories",
        "description": "Retrieves all categories from the database",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Categories not found or database error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error while getting categories."
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/predict": {
      "post": {
        "tags": [
          "Predictions"
        ],
        "summary": "Predict Customer Purchase Behavior",
        "description": "Predicts whether a customer will buy a specific product in a given month based on historical purchase patterns",
        "operationId": "predict",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PredictRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Prediction result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "Will buy",
                    "Won't buy",
                    "Unknown",
                    "This customer never purchased this product."
                  ],
                  "example": "Will buy"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/retrain": {
      "post": {
        "tags": [
          "Model"
        ],
        "summary": "Retrain Model",
        "description": "Retrains the machine learning model with latest data",
        "operationId": "retrain",
        "responses": {
          "200": {
            "description": "Model retrained successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Model retrained successfully."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Model retraining failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "detail": {
                      "type": "string",
                      "description": "Error details"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sales_summary": {
      "get": {
        "tags": [
          "Data"
        ],
        "summary": "Get Sales Summary",
        "description": "Retrieves a summary of sales data including total sales, most sold product, etc.",
        "operationId": "salesSummary",
        "responses": {
          "200": {
            "description": "Sales summary data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SalesSummary"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error retrieving sales summary",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Error while getting sales summary."
                    },
                    "details": {
                      "type": "string",
                      "description": "Error details"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PredictRequest": {
        "type": "object",
        "required": [
          "customer_id",
          "product_id",
          "order_month"
        ],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Unique identifier for customer"
          },
          "product_id": {
            "type": "integer",
            "description": "Unique identifier for product"
          },
          "order_month": {
            "type": "integer",
            "description": "Month number for the order (1-12)"
          }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "integer",
            "description": "Unique identifier for product"
          },
          "ProductName": {
            "type": "string",
            "description": "Name of the product"
          },
          "SupplierID": {
            "type": "integer",
            "description": "ID of the supplier"
          },
          "CategoryID": {
            "type": "integer",
            "description": "ID of the category"
          },
          "QuantityPerUnit": {
            "type": "string",
            "description": "Quantity per unit"
          },
          "UnitPrice": {
            "type": "number",
            "format": "decimal",
            "description": "Price per unit"
          },
          "UnitsInStock": {
            "type": "integer",
            "description": "Number of units in stock"
          },
          "UnitsOnOrder": {
            "type": "integer",
            "description": "Number of units on order"
          },
          "ReorderLevel": {
            "type": "integer",
            "description": "Reorder level"
          },
          "Discontinued": {
            "type": "boolean",
            "description": "Whether product is discontinued"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "CategoryID": {
            "type": "integer",
            "description": "Unique identifier for category"
          },
          "CategoryName": {
            "type": "string",
            "description": "Name of the category"
          },
          "Description": {
            "type": "string",
            "description": "Description of the category"
          },
          "Picture": {
            "type": "string",
            "format": "binary",
            "description": "Binary data for category picture"
          }
        }
      },
      "SalesSummary": {
        "type": "object",
        "properties": {
          "total_sales_amount": {
            "type": "number",
            "format": "float",
            "description": "Total amount of sales (quantity * unit price)"
          },
          "total_items_sold": {
            "type": "integer",
            "description": "Total number of items sold"
          },
          "most_sold_product": {
            "type": "string",
            "description": "Name of the most sold product"
          },
          "most_sold_quantity": {
            "type": "integer",
            "description": "Quantity of the most sold product"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  }
}